// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`(Component) AutoDefectJudgeFilter  render normally if defectCode was empty. 1`] = `
<div
  className="AutoDefectJudgeFilter-container"
>
  <DatePicker2
    data={
      Object {
        "defectCode": Object {},
      }
    }
  />
  <AvailableFilters
    defectCode=""
    lineID=""
    operation=""
    order="asc"
    pageNo={1}
    pageSize={1}
    product=""
    reliabilitys={
      Array [
        0,
        100,
      ]
    }
    sortBy="id"
    subEntity=""
    that={
      AutoDefectJudgeFilter {
        "_reactInternalInstance": ShallowComponentWrapper {
          "_calledComponentWillUnmount": false,
          "_compositeType": 0,
          "_context": Object {},
          "_currentElement": <AutoDefectJudgeFilter
            data={
                  Object {
                        "defectCode": Object {},
                      }
            }
      />,
          "_debugID": 3,
          "_hostContainerInfo": null,
          "_hostParent": null,
          "_instance": [Circular],
          "_mountOrder": 2,
          "_pendingCallbacks": null,
          "_pendingElement": null,
          "_pendingForceUpdate": false,
          "_pendingReplaceState": false,
          "_pendingStateQueue": null,
          "_renderedComponent": NoopInternalComponent {
            "_currentElement": <div
              className="AutoDefectJudgeFilter-container"
      >
              <DatePicker2
                      data={
                              Object {
                                      "defectCode": Object {},
                                    }
                      }
              />
              <AvailableFilters
                      defectCode=""
                      lineID=""
                      operation=""
                      order="asc"
                      pageNo={1}
                      pageSize={1}
                      product=""
                      reliabilitys={
                              Array [
                                      0,
                                      100,
                                    ]
                      }
                      sortBy="id"
                      subEntity=""
                      that={[Circular]}
              />
              <label
                      className="pt-label pt-inline filter"
              >
                      <div
                              className="pt-select"
                              onChange={[Function]}
                      />
              </label>
              <label
                      className="pt-label pt-inline filter"
              >
                      <span
                              className="reliability"
                      />
                      <div
                              className="reliabilitys"
                      >
                              <RangeSlider
                                      disabled={false}
                                      labelStepSize={20}
                                      max={100}
                                      min={0}
                                      onChange={[Function]}
                                      showTrackFill={true}
                                      stepSize={1}
                                      value={
                                              Array [
                                                      0,
                                                      100,
                                                    ]
                                      }
                              />
                      </div>
              </label>
              <Blueprint.Button
                      className="btn-submit"
                      onClick={[Function]}
              >
                      查询
              </Blueprint.Button>
      </div>,
            "_debugID": 4,
            "_renderedOutput": <div
              className="AutoDefectJudgeFilter-container"
      >
              <DatePicker2
                      data={
                              Object {
                                      "defectCode": Object {},
                                    }
                      }
              />
              <AvailableFilters
                      defectCode=""
                      lineID=""
                      operation=""
                      order="asc"
                      pageNo={1}
                      pageSize={1}
                      product=""
                      reliabilitys={
                              Array [
                                      0,
                                      100,
                                    ]
                      }
                      sortBy="id"
                      subEntity=""
                      that={[Circular]}
              />
              <label
                      className="pt-label pt-inline filter"
              >
                      <div
                              className="pt-select"
                              onChange={[Function]}
                      />
              </label>
              <label
                      className="pt-label pt-inline filter"
              >
                      <span
                              className="reliability"
                      />
                      <div
                              className="reliabilitys"
                      >
                              <RangeSlider
                                      disabled={false}
                                      labelStepSize={20}
                                      max={100}
                                      min={0}
                                      onChange={[Function]}
                                      showTrackFill={true}
                                      stepSize={1}
                                      value={
                                              Array [
                                                      0,
                                                      100,
                                                    ]
                                      }
                              />
                      </div>
              </label>
              <Blueprint.Button
                      className="btn-submit"
                      onClick={[Function]}
              >
                      查询
              </Blueprint.Button>
      </div>,
          },
          "_renderedNodeType": 0,
          "_rootNodeID": 0,
          "_topLevelWrapper": null,
          "_updateBatchNumber": null,
          "_warnedAboutRefsInRender": false,
        },
        "context": Object {},
        "filterData": [Function],
        "handleChange": [Function],
        "handleChangeStartReliability": [Function],
        "handleClick": [Function],
        "props": Object {
          "data": Object {
            "defectCode": Object {},
          },
        },
        "refs": Object {},
        "state": Object {
          "defectCode": "",
          "lineID": "",
          "operation": "",
          "order": "asc",
          "pageNo": 1,
          "pageSize": 1,
          "product": "",
          "reliabilitys": Array [
            0,
            100,
          ],
          "sortBy": "id",
          "subEntity": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      }
    }
  />
  <label
    className="pt-label pt-inline filter"
  >
    <div
      className="pt-select"
      onChange={[Function]}
    />
  </label>
  <label
    className="pt-label pt-inline filter"
  >
    <span
      className="reliability"
    />
    <div
      className="reliabilitys"
    >
      <RangeSlider
        disabled={false}
        labelStepSize={20}
        max={100}
        min={0}
        onChange={[Function]}
        showTrackFill={true}
        stepSize={1}
        value={
          Array [
            0,
            100,
          ]
        }
      />
    </div>
  </label>
  <Blueprint.Button
    className="btn-submit"
    onClick={[Function]}
  >
    查询
  </Blueprint.Button>
</div>
`;

exports[`(Component) AutoDefectJudgeFilter  render normally if defectCode was not empty. 1`] = `
<div
  className="AutoDefectJudgeFilter-container"
>
  <DatePicker2
    data={
      Object {
        "defectCode": Object {
          "result": Array [
            "aaaaaa",
            "TEINR",
            "test01",
            "test02",
            "TGGS0",
            "TNPLR0",
            "TNPSR0",
            "TNWLR0",
            "TNWPR0",
            "TPDPD",
            "TPDPS",
            "TSFAS",
            "TTFBA",
            "TTFBG",
            "TTP3S",
            "TTSAD",
          ],
        },
      }
    }
  />
  <AvailableFilters
    defectCode=""
    lineID=""
    operation=""
    order="asc"
    pageNo={1}
    pageSize={1}
    product=""
    reliabilitys={
      Array [
        0,
        100,
      ]
    }
    sortBy="id"
    subEntity=""
    that={
      AutoDefectJudgeFilter {
        "_reactInternalInstance": ShallowComponentWrapper {
          "_calledComponentWillUnmount": false,
          "_compositeType": 0,
          "_context": Object {},
          "_currentElement": <AutoDefectJudgeFilter
            data={
                  Object {
                        "defectCode": Object {
                          "result": Array [
                            "aaaaaa",
                            "TEINR",
                            "test01",
                            "test02",
                            "TGGS0",
                            "TNPLR0",
                            "TNPSR0",
                            "TNWLR0",
                            "TNWPR0",
                            "TPDPD",
                            "TPDPS",
                            "TSFAS",
                            "TTFBA",
                            "TTFBG",
                            "TTP3S",
                            "TTSAD",
                          ],
                        },
                      }
            }
      />,
          "_debugID": 1,
          "_hostContainerInfo": null,
          "_hostParent": null,
          "_instance": [Circular],
          "_mountOrder": 1,
          "_pendingCallbacks": null,
          "_pendingElement": null,
          "_pendingForceUpdate": false,
          "_pendingReplaceState": false,
          "_pendingStateQueue": null,
          "_renderedComponent": NoopInternalComponent {
            "_currentElement": <div
              className="AutoDefectJudgeFilter-container"
      >
              <DatePicker2
                      data={
                              Object {
                                      "defectCode": Object {
                                        "result": Array [
                                          "aaaaaa",
                                          "TEINR",
                                          "test01",
                                          "test02",
                                          "TGGS0",
                                          "TNPLR0",
                                          "TNPSR0",
                                          "TNWLR0",
                                          "TNWPR0",
                                          "TPDPD",
                                          "TPDPS",
                                          "TSFAS",
                                          "TTFBA",
                                          "TTFBG",
                                          "TTP3S",
                                          "TTSAD",
                                        ],
                                      },
                                    }
                      }
              />
              <AvailableFilters
                      defectCode=""
                      lineID=""
                      operation=""
                      order="asc"
                      pageNo={1}
                      pageSize={1}
                      product=""
                      reliabilitys={
                              Array [
                                      0,
                                      100,
                                    ]
                      }
                      sortBy="id"
                      subEntity=""
                      that={[Circular]}
              />
              <label
                      className="pt-label pt-inline filter"
              >
                      <div
                              className="pt-select"
                              onChange={[Function]}
                      >
                              <select
                                      className="select"
                              >
                                      <option
                                              value=""
                                      >
                                              请选择
                                      </option>
                                      <option
                                              value="aaaaaa"
                                      >
                                              aaaaaa
                                      </option>
                                      <option
                                              value="TEINR"
                                      >
                                              TEINR
                                      </option>
                                      <option
                                              value="test01"
                                      >
                                              test01
                                      </option>
                                      <option
                                              value="test02"
                                      >
                                              test02
                                      </option>
                                      <option
                                              value="TGGS0"
                                      >
                                              TGGS0
                                      </option>
                                      <option
                                              value="TNPLR0"
                                      >
                                              TNPLR0
                                      </option>
                                      <option
                                              value="TNPSR0"
                                      >
                                              TNPSR0
                                      </option>
                                      <option
                                              value="TNWLR0"
                                      >
                                              TNWLR0
                                      </option>
                                      <option
                                              value="TNWPR0"
                                      >
                                              TNWPR0
                                      </option>
                                      <option
                                              value="TPDPD"
                                      >
                                              TPDPD
                                      </option>
                                      <option
                                              value="TPDPS"
                                      >
                                              TPDPS
                                      </option>
                                      <option
                                              value="TSFAS"
                                      >
                                              TSFAS
                                      </option>
                                      <option
                                              value="TTFBA"
                                      >
                                              TTFBA
                                      </option>
                                      <option
                                              value="TTFBG"
                                      >
                                              TTFBG
                                      </option>
                                      <option
                                              value="TTP3S"
                                      >
                                              TTP3S
                                      </option>
                                      <option
                                              value="TTSAD"
                                      >
                                              TTSAD
                                      </option>
                              </select>
                      </div>
              </label>
              <label
                      className="pt-label pt-inline filter"
              >
                      <span
                              className="reliability"
                      />
                      <div
                              className="reliabilitys"
                      >
                              <RangeSlider
                                      disabled={false}
                                      labelStepSize={20}
                                      max={100}
                                      min={0}
                                      onChange={[Function]}
                                      showTrackFill={true}
                                      stepSize={1}
                                      value={
                                              Array [
                                                      0,
                                                      100,
                                                    ]
                                      }
                              />
                      </div>
              </label>
              <Blueprint.Button
                      className="btn-submit"
                      onClick={[Function]}
              >
                      查询
              </Blueprint.Button>
      </div>,
            "_debugID": 2,
            "_renderedOutput": <div
              className="AutoDefectJudgeFilter-container"
      >
              <DatePicker2
                      data={
                              Object {
                                      "defectCode": Object {
                                        "result": Array [
                                          "aaaaaa",
                                          "TEINR",
                                          "test01",
                                          "test02",
                                          "TGGS0",
                                          "TNPLR0",
                                          "TNPSR0",
                                          "TNWLR0",
                                          "TNWPR0",
                                          "TPDPD",
                                          "TPDPS",
                                          "TSFAS",
                                          "TTFBA",
                                          "TTFBG",
                                          "TTP3S",
                                          "TTSAD",
                                        ],
                                      },
                                    }
                      }
              />
              <AvailableFilters
                      defectCode=""
                      lineID=""
                      operation=""
                      order="asc"
                      pageNo={1}
                      pageSize={1}
                      product=""
                      reliabilitys={
                              Array [
                                      0,
                                      100,
                                    ]
                      }
                      sortBy="id"
                      subEntity=""
                      that={[Circular]}
              />
              <label
                      className="pt-label pt-inline filter"
              >
                      <div
                              className="pt-select"
                              onChange={[Function]}
                      >
                              <select
                                      className="select"
                              >
                                      <option
                                              value=""
                                      >
                                              请选择
                                      </option>
                                      <option
                                              value="aaaaaa"
                                      >
                                              aaaaaa
                                      </option>
                                      <option
                                              value="TEINR"
                                      >
                                              TEINR
                                      </option>
                                      <option
                                              value="test01"
                                      >
                                              test01
                                      </option>
                                      <option
                                              value="test02"
                                      >
                                              test02
                                      </option>
                                      <option
                                              value="TGGS0"
                                      >
                                              TGGS0
                                      </option>
                                      <option
                                              value="TNPLR0"
                                      >
                                              TNPLR0
                                      </option>
                                      <option
                                              value="TNPSR0"
                                      >
                                              TNPSR0
                                      </option>
                                      <option
                                              value="TNWLR0"
                                      >
                                              TNWLR0
                                      </option>
                                      <option
                                              value="TNWPR0"
                                      >
                                              TNWPR0
                                      </option>
                                      <option
                                              value="TPDPD"
                                      >
                                              TPDPD
                                      </option>
                                      <option
                                              value="TPDPS"
                                      >
                                              TPDPS
                                      </option>
                                      <option
                                              value="TSFAS"
                                      >
                                              TSFAS
                                      </option>
                                      <option
                                              value="TTFBA"
                                      >
                                              TTFBA
                                      </option>
                                      <option
                                              value="TTFBG"
                                      >
                                              TTFBG
                                      </option>
                                      <option
                                              value="TTP3S"
                                      >
                                              TTP3S
                                      </option>
                                      <option
                                              value="TTSAD"
                                      >
                                              TTSAD
                                      </option>
                              </select>
                      </div>
              </label>
              <label
                      className="pt-label pt-inline filter"
              >
                      <span
                              className="reliability"
                      />
                      <div
                              className="reliabilitys"
                      >
                              <RangeSlider
                                      disabled={false}
                                      labelStepSize={20}
                                      max={100}
                                      min={0}
                                      onChange={[Function]}
                                      showTrackFill={true}
                                      stepSize={1}
                                      value={
                                              Array [
                                                      0,
                                                      100,
                                                    ]
                                      }
                              />
                      </div>
              </label>
              <Blueprint.Button
                      className="btn-submit"
                      onClick={[Function]}
              >
                      查询
              </Blueprint.Button>
      </div>,
          },
          "_renderedNodeType": 0,
          "_rootNodeID": 0,
          "_topLevelWrapper": null,
          "_updateBatchNumber": null,
          "_warnedAboutRefsInRender": false,
        },
        "context": Object {},
        "filterData": [Function],
        "handleChange": [Function],
        "handleChangeStartReliability": [Function],
        "handleClick": [Function],
        "props": Object {
          "data": Object {
            "defectCode": Object {
              "result": Array [
                "aaaaaa",
                "TEINR",
                "test01",
                "test02",
                "TGGS0",
                "TNPLR0",
                "TNPSR0",
                "TNWLR0",
                "TNWPR0",
                "TPDPD",
                "TPDPS",
                "TSFAS",
                "TTFBA",
                "TTFBG",
                "TTP3S",
                "TTSAD",
              ],
            },
          },
        },
        "refs": Object {},
        "state": Object {
          "defectCode": "",
          "lineID": "",
          "operation": "",
          "order": "asc",
          "pageNo": 1,
          "pageSize": 1,
          "product": "",
          "reliabilitys": Array [
            0,
            100,
          ],
          "sortBy": "id",
          "subEntity": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      }
    }
  />
  <label
    className="pt-label pt-inline filter"
  >
    <div
      className="pt-select"
      onChange={[Function]}
    >
      <select
        className="select"
      >
        <option
          value=""
        >
          请选择
        </option>
        <option
          value="aaaaaa"
        >
          aaaaaa
        </option>
        <option
          value="TEINR"
        >
          TEINR
        </option>
        <option
          value="test01"
        >
          test01
        </option>
        <option
          value="test02"
        >
          test02
        </option>
        <option
          value="TGGS0"
        >
          TGGS0
        </option>
        <option
          value="TNPLR0"
        >
          TNPLR0
        </option>
        <option
          value="TNPSR0"
        >
          TNPSR0
        </option>
        <option
          value="TNWLR0"
        >
          TNWLR0
        </option>
        <option
          value="TNWPR0"
        >
          TNWPR0
        </option>
        <option
          value="TPDPD"
        >
          TPDPD
        </option>
        <option
          value="TPDPS"
        >
          TPDPS
        </option>
        <option
          value="TSFAS"
        >
          TSFAS
        </option>
        <option
          value="TTFBA"
        >
          TTFBA
        </option>
        <option
          value="TTFBG"
        >
          TTFBG
        </option>
        <option
          value="TTP3S"
        >
          TTP3S
        </option>
        <option
          value="TTSAD"
        >
          TTSAD
        </option>
      </select>
    </div>
  </label>
  <label
    className="pt-label pt-inline filter"
  >
    <span
      className="reliability"
    />
    <div
      className="reliabilitys"
    >
      <RangeSlider
        disabled={false}
        labelStepSize={20}
        max={100}
        min={0}
        onChange={[Function]}
        showTrackFill={true}
        stepSize={1}
        value={
          Array [
            0,
            100,
          ]
        }
      />
    </div>
  </label>
  <Blueprint.Button
    className="btn-submit"
    onClick={[Function]}
  >
    查询
  </Blueprint.Button>
</div>
`;
